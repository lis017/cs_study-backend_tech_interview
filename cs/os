⁷★★★--------------------------------------------------------------------------------------------------------------------------
뮤텍스와 세마포어란?
  -> 공유자원에 스레드, 프로세스가 동시에 몰리는것을 방지하는 동기화 도구입니다.
  -> 병렬 프로그래밍을 할때 사용됨  
//복습

(뮤텍스와 세마포어) 생길수 있는 문제는?
    -> 쓰더라도, 교착상태(데드락) + 기아상태 + 우선순위 역전. 생길수 있음.
//복습

기아상태란?
 -> 여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우
//꼬리질문
해결법은? -> 우선순위를 변경합니다.(우선순위를 수시로 변경하거나, 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용합니다.)
//복습

프로세스와 스레드의 차이를 설명해보세요.
-> 프로세스는 실행중인 프로그램을 의미, 스레드는 실행 제어만 분리한 것을 의미
-> 프로세스는 운영체제로부터 자원을 할당받지만, 
스레드는 프로세스로부터 자원을 할당받고, 프로세스의 코드/데이터/힙영역을 공유하기 때문에 좀 더 효율적으로 통신할 수 있습니다. 
//복습

컨텍스트 스위칭에 대해 설명해보세요.
-> 컨텍스트 스위칭은 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다.
-> 잦은 컨텍스트 스위칭은 성능저하를 일으킬 수 있습니다.
//복습

동기와 비동기의 차이(블로킹, 넌블로킹) / 장단점에 대해 설명해보세요.
-> 동기/비동기는 두 개 이상의 무엇인가가 시간을 맞춘다/안맞춘다로 구분할 수 있습니다.
-> 동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같습니다.
-> 비동기 방식은 여러 개의 처리가 함께 실행되는 방식으로, 동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있습니다.
단, CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있습니다.
//복습

멀티스레드 프로그래밍에 대해 설명해보세요.
-> 하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것
->장점
힙 영역을 통해서 스레드간 통신이 가능해서 프로세스간 통신보다 간단함.
->단점
힙 영역에 있는 자원을 사용할 때는 동기화를 해야합니다.
동기화를 위해서 락을 과도하게 사용하면 성능이 저하될 수 있습니다.
//복습

Thread-safe 하다는 의미와 설계하는 법을 설명해보세요.
-> 두 개 이상의 스레드가 race condition에 들어가거나 같은 객체에 동시에 접근해도
  연산결과의 정합성이 보장될 수 있게끔 메모리 가시성이 확보된 상태를 의미합니다.
-> 설계하는법
- java.util.concurrent 패키지 하위의 클래스를 사용합니다.
- 인스턴스 변수를 두지 않는다.   등이 있습니다.
//복습

프로세스 동기화에 대해 설명해보세요.
-> 다중 프로세스 환경에서 자원등에 한 프로세스만이 접근가능하도록 하는 것
-> 프로세스 동기화를 하지 않으면 데이터의 일관성이 깨지기 때문에 연산결과가 잘못 반환될 가능성이 
  존재하기 때문에 주의해야 합니다.
-> 이에 관한 문제들: Race Condition(경쟁 상태), Critical Section(임계 구역)
//복습

임계 구역 문제를 해결하기 위한 조건(모두 충족해야함)
- 한 프로세스가 임계구역에서 동작중이면 다른 프로세스는 접근할 수 없다.
- 임계구역에서 작업중인 프로세스가 없다면 입계구역으로 진입하려는 프로세스를
적절히 선택해서 진입할 수 있도록 합니다.
- 한 프로세스가 임계영역으로 진입을 요청한 후
다른 프로세스는 진입이 유한한 횟수로 제한되어야 합니다. (기아상태 방지)
//복습

교착상태와 기아상태의 해결방법에 대해 설명해보세요.
-> 교착상태(Deadlock): 서로 다른 프로세스(or 스레드)가 서로 점유하고 있는 자원의 반납을 대기하고 있는 상태를 의미합니다.
-> 해결방법
- 회피: 알고리즘을 데드락이 발생하지 않도록 합니다.
- 발생했을때 해결 하거나
- 무시: 회복과정의 성능저하가 심하다면 그냥 무시
등의 방법으로 해결합니다.
-> 기아상태(Starvation): 여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우입니다.
-> 우선순위를 변경합니다.(우선순위를 수시로 변경하거나, 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용합니다.)
//복습

세마포어와 뮤텍스의 차이에 대해 설명해보세요.
-> 세마포어는 여러개의 프로세스가 접근 가능한 공유자원을 관리하는 방식이고,
  뮤텍스가 될 수 있지만
-> 뮤텍스는 한 번에 한 개의 프로세스만 접근 가능하도록 관리하는 방식입니다.
//복습

가상 메모리에 대해 설명해보세요.
-> 가상 메모리는 프로세스가 실제 메모리의 크기와 상관없이 메모리를 이용할 수 있도록 지원하는 기술 입니다.
-> 가상 메모리는 실제 메모리와 보조 기억 장치의 Swap 영역으로 구성됩니다.
-> Swap 영역은 실제 메모리가 아니기 때문에 지연시간이 많이 발생하며, 가급적이면 Swap 메모리를 사용하지 않도록 설계하는 것이 좋다
//복습

캐시의 지역성에 대해 설명해보세요.
-> 시간 지역성과 공간 지역성으로 나눌 수 있으며, 
  시간 지역성은 최근에 접근한 데이터에 다시 접근하는 경향을 의미하고,
  공간 지역성은 최근 접근한 데이터의 주변 공간에 다시 접근하는 경향을 의미합니다.
-> 캐시가 무엇인가?
  cpu 칩 안에 들어가는 작고 빠른 메모리
->왜 캐시를 사용하는가 ?
   캐시의 속도가 메모리보다 빠르기에, 자주사용하는데이터를 캐시에 담아두고 사용함.
//복습











